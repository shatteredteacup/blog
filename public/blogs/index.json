{"blogs":[{"title":"Visual Coding Principles","path":"visual-coding-principles","tags":["code"],"content":"When I write code, I want it to look good. Below I'll outline some principles and considerations for writing good-looking code.\n\n### Task\n\nSuppose we are tasked to re-implement\n\n```javascript\ndate.toLocaleTimeString('en-GB', {\n  hour: '2-digit',\n  minute: '2-digit',\n});\n```\n\nin javascript in a function `getClockTime`, which in particular returns, as a string, the hours and minutes that would appear on a digital clock, associated with a specific `Date` instance. E.g.\n\n```javascript\nconst date = new Date('1995-12-25T23:15:30'); // then\ngetClockTime(date); // returns 23:15\n```\n\n### Initial Implementation\n\nHere is one way to accomplish this:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  return `${hours}:${minutes}`;\n};\n```\n\nI claim that this function looks wrong.\n\n### Line Waves\n\nNotice the positions of the ends of the lines of this function:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours(); /\n  let minutes = date.getMinutes(); /\n  if (hours < 10) { /\n    hours = `0${hours}`; /\n  } /\n  if (minutes < 10) { /\n    minutes = `0${minutes}`; /\n  } /\n  return `${hours}:${minutes}`; /\n};\n```\n\nAt a glance, one perceives that there is made out a pattern such as:\n\ntwo bumps:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours();    \\\n  let minutes = date.getMinutes();  |\n  if (hours < 10) {               /\n    hours = `0${hours}`;       /\n  }                          |\n  if (minutes < 10) {         \\\n    minutes = `0${minutes}`;    \\\n  }                               |\n  return `${hours}:${minutes}`;  /\n};\n```\n\nor a concavity:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours();        /\n  let minutes = date.getMinutes();  /\n  if (hours < 10) {               /\n    hours = `0${hours}`;        /\n  }                           /\n  if (minutes < 10) {         \\\n    minutes = `0${minutes}`;    \\\n  }                               \\\n  return `${hours}:${minutes}`;     \\\n};\n```\n\nBoth of these example patterns have naive connotations.\n\nE.g. I may read 'two bumps' as if there are two chunks of work in the function. This is often well-fitted to if-else statments. For instance, from the code for (the script for removing blogs from) this blog:\n\n```javascript\nif (!blogs.some(matchesTitle)) {                  \\\n  console.log(`\\nBlog '${title}' was not found.`); |\n  process.exit(1);                                /\n} else {                                         \\\n  writeBlogs(blogs.filter(negator(matchesTitle))); |\n  cleanupImages(title);                            /\n  console.log(`\\nBlog '${title}' removed.`);     /\n}                                              /\n;\n```\n\n--In general, the patterns formed about the ends of the lines of a function, the 'line waves', can have connotations which impact one's perception of the operation of the function. If those connotations are accurate to the operation of the function, I call it linusoidal. This is one visual consideration when writing functions. You can also replace function with module or class throughout.\n\nI don't think the line waves of our function are very good.\n\n### Visual Balance\n\nAlso, notice something about the chunkiness of the middle section of for the if statements:\n\n```javascript\nif (hours < 10) {\n  hours = `0${hours}`;\n}\nif (minutes < 10) {\n  minutes = `0${minutes}`;\n}\n```\n\nIt takes up six lines. For this function, that is a lot of space. So, it puts too much weight on the matter of prefixing the zeros.\n\nA lot of the important work of `getClockTime` should’ve already been done after getting the relevant number of hours and minutes from the date object for the time. To dedicate many of its lines to a minor incidental other matter about prefixing zeros creates a distortion. --When I look at the function and gauge its key operations, my attention is drawn to the overlarge middle portion: that distorts the abstract story about `getClockTime`'s responsibilities.\n\nI say more because it's interesting: Compare with another example. For the page you're currently reading this on, written in React, the distinguishing logic resides in a component called `BlogPage`. When I was adding the ability for me to edit blogs, I added the ability also for the user to see a 'last edited' date. That made the return statement of `BlogPage` look like this:\n\n```javascript\nreturn blog ? (\n  <div className={styles.blogContainer}>\n    <article className={styles.blog}>\n      <h1 className={styles.blogTitle}>{blog.title}</h1>\n      <span className={styles.blogDate}>\n        <small>{getCalendarDate(blog.timestamp)}</small>\n        {blog.lastEdited && (\n          <small>\n            (<em>Last edited:</em> {getCalendarDate(blog.lastEdited)})\n          </small>\n        )}\n      </span>\n      <hr />\n      <main>\n        <Markdown>{blog.content}</Markdown>\n      </main>\n    </article>\n  </div>\n) : null;\n```\n\nBut that gives up too much space in the return statment to the logic of date-gathering, misplacing emphasis. At a glance, one barely even notices the `h1` for the blog's title. I fixed this problem by introducing a separate component, `BlogDate`, to encapsulate the date-gathering logic, changing the return statment like so:\n\n```javascript\nreturn blog ? (\n  <div className={styles.blogContainer}>\n    <article className={styles.blog}>\n      <h1 className={styles.blogTitle}>{blog.title}</h1>\n      <BlogDate blog={blog} />\n      <hr />\n      <main>\n        <Markdown>{blog.content}</Markdown>\n      </main>\n    </article>\n  </div>\n) : null;\n```\n\nAgain I infer to the general idea: The proportion of space that a piece of code occupies in its containing function (which combines line length, line number, and negative space) affects your perception of the code’s importance to that function. 'Visual balance' is about matching this apparent importance to the true importance. As a principle, functions are ideally visually balanced. (Fine to replace for module or class, still.)\n\n### Some Changes\n\nLet's seek visual balance by eliminating the braces about the if statements. Whence six lines become two:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  if (hours < 10) hours = `0${hours}`;\n  if (minutes < 10) minutes = `0${minutes}`;\n  return `${hours}:${minutes}`;\n};\n```\n\nThe line waves are also better:\n\n```javascript\nconst getClockTime = (date) => {\n  let hours = date.getHours();        \\\n  let minutes = date.getMinutes();       \\\n  if (hours < 10) hours = `0${hours}`;      \\\n  if (minutes < 10) minutes = `0${minutes}`;  |\n  return `${hours}:${minutes}`;              /\n};\n```\n\nThe slope in the function's body followed by a short return statement conforms naively to that a chunk of work was building up and then was absorbed into a concise conclusion.\n\n### Some problems\n\nBetter but I want to say more. I'll get to this by making some changes by correcting some non-visual problems with this implementation which are interesting to note anyway. Problems:\n\n1. One should try to avoid reassigning variables where the reassignment causes the meaning of the variable to become ambiguous. Here, the hours/minutes variable holds an integer, and subsequently, is perhaps reassigned to a string.\n2. These two lines:\n\n   ```javascript\n   if (hours < 10) hours = `0${hours}`;\n   if (minutes < 10) minutes = `0${minutes}`;\n   ```\n\n   have the same logic, and it would be nice to know to what abstraction that logic corresponds -- which is the abstraction that `getClockTime` preferably deals with. Contrast with the first two lines:\n\n   ```javascript\n   let hours = date.getHours();\n   let minutes = date.getMinutes();\n   ```\n\n   Here there is encapsulated some relevant logic, and `getClockTime` is exposed merely to the interface of `getHours` or `getMinutes`. `getClockTime` is responsible for a certain 'level of the converation', and the first two lines set a tone which we prefer to be consistent with in subsequent lines.\n\n3. Sometimes there is a linting rule in a codebase about if statements always having braces. Occassionally one has to deal with annoying obstacles like this.\n\n### Revised Implementation\n\nWith a mind to solving all three of those problems, here is an alternative:\n\n```javascript\nconst getClockTime = (date) => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const hoursDigits = getClockDigits(hours);\n  const minutesDigits = getClockDigits(minutes);\n  return `${hoursDigits}:${minutesDigits}`;\n};\n```\n\n(Ignore `getClockDigits`, bury it as another utility function.[^1])\n\n[^1]: But which obviously works like this:\n\n    ```javascript\n    const getClockDigits = (time) => (time < 10 ? `0${time}` : `${time}`);\n    ```\n\n### Mosaicality\n\nNotice that this implementation involves a predominace of variable declarations on the left hand side; on the right hand side, a predominance of function calls.\n\nThis looks consistent and orderly and feels soothing. To the effect is added that one's editor will generally colour each of these (variable declarations/function calls) in a uniform fashion. In my editor, the left hand side is predominantly blue, and the right a light yellowish/beige-ish colour.\n\nCompare that to the initial implementation: The admixture of variable declarations and function calls with if conditions, numeric literals, and a couple more of template strings, makes for a greater disorder of shapes and colours and makes me more uneasy.\n\nI say that the revised version of `getClockTime` forms a visually pleasing mosaic: the shapes and colours of the function are harmonious: it is mosaical.\n\n--That's all I wanted to say\n","timestamp":1698359860534,"lastEdited":1748888974052}],"metadata":{"images":{}}}